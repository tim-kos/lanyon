{"version":3,"sources":["../src/boot.js"],"names":["require","module","exports","whichPackage","_","config","utils","fs","asyncMapValues","scrolex","pad","runtime","scripts","dockerCmd","trace","profile","cmdName","process","argv","cmd","persistOpts","announce","addCommandAsComponent","components","env","DEBUG","LANYON_DISABLE_GEMS","NODE_ENV","lanyonEnv","JEKYLL_ENV","LANYON_PROJECT","projectDir","main","failure","exit","stick","type","version","pid","__filename","cacheDir","gitRoot","npmRoot","LANYON_EXCLUDE","LANYON_INCLUDE","match","initProject","runhooks","writeConfig","isFunction","err","isString","replace","lanyonDir","contentBuildDir","npmBins","name","tests","found","forEach","existsSync","test","Error","join","pat","RegExp","scrolexOpts","stdio","cwd","fatal","mode","binDir","versionMapping","webpack","nodemon","jekyll","bundler","key","callback","exe","stdouts","app","split","pop","e","out","Object","keys","boot"],"mappings":"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","file":"boot.js","sourcesContent":["require('babel-polyfill')\nmodule.exports = async function boot (whichPackage) {\n  const _              = require('lodash')\n  const config         = require('./config')\n  const utils          = require('./utils')\n  const fs             = require('fs')\n  const asyncMapValues = require('async/mapValues')\n  const scrolex        = require('scrolex')\n  const pad            = require('pad')\n  const runtime        = config.runtime\n\n  // 'start'                    : 'parallelshell \"lanyon build:content:watch\" \"lanyon build:assets:watch\" \"lanyon serve\"',\n  const scripts = {\n    // assets:watch is typically handled via browsersync middleware, so this is more for debugging purposes:\n    'build:assets:watch'       : 'webpack --watch --config [cacheDir]/webpack.config.js',\n    'build:assets'             : 'webpack --config [cacheDir]/webpack.config.js',\n    'build:content:incremental': 'jekyll build --incremental --source [projectDir] --destination [contentBuildDir] --verbose --config [projectDir]/_config.yml,[cacheDir]/jekyll.config.yml,[cacheDir]/jekyll.lanyon_assets.yml',\n    'build:content:watch'      : 'nodemon --config [cacheDir]/nodemon.config.json --exec \"lanyon build:content:incremental\"',\n    'build:content'            : 'jekyll build --source [projectDir] --destination [contentBuildDir] --verbose --config [projectDir]/_config.yml,[cacheDir]/jekyll.config.yml,[cacheDir]/jekyll.lanyon_assets.yml',\n    // 'build:images'             : 'imagemin [projectDir]/assets/images --out-dir=[projectDir]/assets/build/images',\n    // @todo: useless until we have: https://github.com/imagemin/imagemin-cli/pull/11 and https://github.com/imagemin/imagemin/issues/226\n    'build:emoji'              : 'bundler exec gemoji extract assets/images/emoji',\n    'build'                    : 'lanyon build:assets && lanyon build:content', // <-- parrallel won't work for production builds, jekyll needs to copy assets into _site\n    'container:connect'        : utils.dockerCmd(runtime, 'sh', '--interactive --tty'),\n    'deploy'                   : require(`./deploy`),\n    'encrypt'                  : require(`./encrypt`),\n    'help'                     : 'jekyll build --help',\n    'install'                  : require(`./install`),\n    'list:ghpgems'             : 'bundler exec github-pages versions --gem',\n    'serve'                    : 'browser-sync start --config [cacheDir]/browsersync.config.js',\n    'start'                    : 'parallelshell \"lanyon build:content:watch\" \"lanyon serve\"',\n  }\n\n  if (runtime.trace) {\n    scripts['build:content:incremental'] += ' --trace'\n    scripts['build:content']             += ' --trace'\n  }\n\n  if (runtime.profile) {\n    scripts['build:content:incremental'] += ' --profile'\n    scripts['build:content']             += ' --profile'\n  }\n\n  const cmdName = process.argv[2]\n  let cmd       = scripts[cmdName]\n\n  scrolex.persistOpts({\n    announce             : true,\n    addCommandAsComponent: true,\n    components           : `lanyon>${cmdName}`,\n    env                  : Object.assign({}, process.env, {\n      DEBUG              : process.env.DEBUG,\n      LANYON_DISABLE_GEMS: process.env.LANYON_DISABLE_GEMS,\n      NODE_ENV           : runtime.lanyonEnv,\n      JEKYLL_ENV         : runtime.lanyonEnv,\n      LANYON_PROJECT     : runtime.projectDir, // <-- to preserve the cwd over multiple nested executes, if it wasn't initially setly set\n    }),\n  })\n\n  if (require.main === module) {\n    scrolex.failure(`Please only used this module via require`)\n    process.exit(1)\n  }\n\n  scrolex.stick(`Booting ${whichPackage.type} Lanyon->${cmdName}. Version: ${whichPackage.version} on PID: ${process.pid} from: ${__filename}`)\n  scrolex.stick(`Detected cacheDir as \"${runtime.cacheDir}\"`)\n  scrolex.stick(`Detected gitRoot as \"${runtime.gitRoot}\"`)\n  scrolex.stick(`Detected npmRoot as \"${runtime.npmRoot}\"`)\n\n  if ('LANYON_DISABLE_GEMS' in process.env && process.env.LANYON_DISABLE_GEMS) {\n    scrolex.stick(`Disabled gems ${process.env.LANYON_DISABLE_GEMS} as per LANYON_DISABLE_GEMS`)\n  }\n  if ('LANYON_EXCLUDE' in process.env && process.env.LANYON_EXCLUDE) {\n    scrolex.stick(`Disabled building of ${process.env.LANYON_EXCLUDE} as per LANYON_EXCLUDE`)\n  }\n  if ('LANYON_INCLUDE' in process.env && process.env.LANYON_INCLUDE) {\n    scrolex.stick(`Explicitly enabling building of ${process.env.LANYON_INCLUDE} as per LANYON_INCLUDE`)\n  }\n\n  // Create asset dirs and git ignores\n  if (cmdName.match(/^build|install|start/)) {\n    utils.initProject(runtime)\n  }\n\n  // Run Pre-Hooks\n  await utils.runhooks('pre', cmdName, runtime)\n\n  // Write all config files to cacheDir\n  scrolex.stick('Writing configs')\n  utils.writeConfig(config)\n\n  // Run cmd arg\n  if (_.isFunction(cmd)) {\n    scrolex.stick(`Running ${cmdName} function`)\n    cmd(runtime, err => {\n      if (err) {\n        scrolex.failure(`${cmdName} function exited with error ${err}`)\n        process.exit(1)\n      }\n      scrolex.stick(`${cmdName} done`)\n    })\n  } else if (_.isString(cmd)) {\n    // Replace dirs\n    cmd = cmd.replace(/\\[lanyonDir]/g, runtime.lanyonDir)\n    cmd = cmd.replace(/\\[contentBuildDir]/g, runtime.contentBuildDir)\n    cmd = cmd.replace(/\\[projectDir]/g, runtime.projectDir)\n    cmd = cmd.replace(/\\[cacheDir]/g, runtime.cacheDir)\n\n    // Replace all npms with their first-found full-path executables\n    const npmBins = {\n      'browser-sync' : 'node_modules/browser-sync/bin/browser-sync.js',\n      'lanyon'       : 'node_modules/lanyon/lib/cli.js',\n      'nodemon'      : 'node_modules/nodemon/bin/nodemon.js',\n      'npm-run-all'  : 'node_modules/npm-run-all/bin/npm-run-all/index.js',\n      'parallelshell': 'node_modules/parallelshell/index.js',\n      'webpack'      : 'node_modules/webpack/bin/webpack.js',\n      // 'imagemin'     : 'node_modules/imagemin-cli/cli.js',\n    }\n    for (const name in npmBins) {\n      const tests = [\n        `${runtime.npmRoot}/${npmBins[name]}`,\n        `${runtime.projectDir}/${npmBins[name]}`,\n        `${runtime.lanyonDir}/${npmBins[name]}`,\n        `${runtime.gitRoot}/${npmBins[name]}`,\n      ]\n\n      let found = false\n      tests.forEach(test => {\n        if (fs.existsSync(test)) {\n          npmBins[name] = test\n          found         = true\n          return false // Stop looking on first hit\n        }\n      })\n\n      if (!found) {\n        throw new Error(`Cannot find dependency \"${name}\" in \"${tests.join('\", \"')}\"`)\n      }\n      const pat = new RegExp(`(\\\\s|^)${name}(\\\\s|$)`)\n      cmd = cmd.replace(pat, `$1node ${npmBins[name]}$2`)\n    }\n\n    const scrolexOpts = {\n      stdio: 'pipe',\n      cwd  : runtime.cacheDir,\n      fatal: true,\n    }\n    if (cmdName !== 'start') {\n      scrolexOpts.mode = 'passthru'\n    }\n    if (cmdName === 'container:connect') {\n      scrolexOpts.stdio = 'inherit'\n    }\n\n    // Replace shims\n    cmd = cmd.replace(/(\\s|^)jekyll(\\s|$)/, `$1${runtime.binDir}/jekyll$2`)\n    cmd = cmd.replace(/(\\s|^)bundler(\\s|$)/, `$1${runtime.binDir}/bundler$2`)\n\n    if (cmdName.match(/(^start|^deploy|^build$)/)) {\n      // Show versions\n      let versionMapping = {\n        webpack: `node ${npmBins.webpack} -v`,\n        nodemon: `node ${npmBins.nodemon} -v`,\n        jekyll : `${runtime.binDir}/jekyll -v`,\n        bundler: `${runtime.binDir}/bundler -v`,\n      }\n      try {\n        asyncMapValues(versionMapping, function (cmd, key, callback) {\n          scrolex.exe(cmd, { mode: 'silent', cwd: runtime.cacheDir }, callback)\n        }, (err, stdouts) => {\n          if (err) {\n            return scrolex.failure(err)\n          }\n          for (let app in stdouts) {\n            let version = stdouts[app].split(/\\s+/).pop()\n            scrolex.stick(`On ${pad(app, 7)}: v${version}`)\n          }\n        })\n      } catch (e) {\n        return scrolex.failure(e)\n      }\n    }\n\n    scrolex.exe(cmd, scrolexOpts, async (err, out) => { // eslint-disable-line handle-callback-err\n      // Run Post-Hooks\n      await utils.runhooks('post', cmdName, runtime)\n    })\n  } else {\n    scrolex.failure(`\"${cmdName}\" is not a valid Lanyon command. Pick from: ${Object.keys(scripts).join(', ')}.`)\n    process.exit(1)\n  }\n}\n"]}